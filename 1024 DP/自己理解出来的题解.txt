虽然这道题的数据范围感人，n <= 1e6, m 不知道，内存 32M. 基本上告诉我们的信息就是二维的数组都开不下了，那么肯定要做一些黑科技的优化。但是这道题直接看正解是很难理解的，包括我现在看了正解还是有些地方不太明白，下面的解析是我按自己的理解 YY 的，可能有些地方并不一定对。

在正解之前，我们先来理解不做没优化的情况。如果抛开限制不谈，那么这道题的状态还是很好表示的。用 dp[i][j] 表示当子区间个数为 i，选取第 j 个数的时候的最大值。

对于 dp[i][j] 的值有两种决策：

	1.将第 j 个数合并到第 i 个区间，区间个数不变，最大和为 dp[i][j-1]+a[j].
	2.将第 j 个数单独划一个区间，此时区间个数由 i-1 变为 i，最大和为当区间长度为 i-1 的时候能取到的最大值 (也就是 dp[i-1][k]) 加上 a[j].

我们可以得到这样的状态转移方程：

	dp[i][j] = max(dp[i][j-1] + a[j], dp[i-1][k] + a[j]), 其中 k∈[i-1, j-1]

也即
	dp[i-1][k] = max(dp[i-1][i-1], dp[i-1][i], ....., dp[i-1][j-1]).

意思是，dp[i][j] 的取值只和 dp[i][j-1] 和 dp[i-1][k] 有关。由于 i = 1 => m，那么我们事实上可以将数组降成两个一维的，也就是运用滚动数组来解这道题目：

设 d[j] 表示第 j 个数一定取的时候的最大值(dp[i][j])，premax[j] 表示 max(dp[i][i], ..., dp[i][j])。

那么原方程就可以化为 dp[j] = max(dp[j-1] + a[j], premax[j-1] + a[j]);

我们首先枚举区间的数量，用 curmax 表示当区间个数为 i 的时候能取得的最大值是多少，初始值为 -INF。

接着，我们枚举剩余的所有没有划分区间的数，每次枚举首先计算 dp[j]，然后再将 premax[j-1] 设为 curmax，然后更新 curmax 的值为 max(curmax, dp[j]).curmax 在这里的作用就相当于表示了 max(dp[i-1][i-1], ..., dp[i-1][j-1])，我们可以利用滚动数组边 DP 边计算 curmax，然后把 curmax 更新给 premax 来保存. 全部计算完之后最后的结果就是最后一次更新后的 curmax 值了。

核心的伪代码如下：

initialize curmax
for (i = 1 => m)
    let curmax = -infinity
    for (j = i => n)
        calculate dp[j] = max(dp[j-1] + a[j], premax[j-1] + a[j])
        update    premax[j-1] = curmax
        update    curmax = max(dp[j], curmax)
print curmax